HTML을 HTML 파일에 직접 작성하지 않는다
    모든 것이 JS에서 시작된다
    React JS는 우리가 해왔던 방식을 거꾸로 하고 있음
    React JS는 업데이트가 필요한 element만 업데이트를 한다

render() : React element를 HTML에 배치한다는 뜻
    사용자에게 보여준다

JSX : JavaScript를 확장한 문법
    생긴게 HTML이랑 비슷해서, JSX로 React 요소를 만드는게 개발자들 입장에선 굉장히 편함
    하지만 JSX를 브라우저가 재대로 인식하지 못하기에 Babel로 변환시켜야 한다
    컴포넌트
        컴포넌트의 첫글자는 반드시 대문자여야 한다
        소문자면 HTML 태그로 인식을 해버린다
    class = calssName
    for = htmlFor

state : 기본적으로 데이터가 저장되는 곳
React.useState(defaultValue) : 두개의 인자를 받는 함수 : [undifined, f]
    undifined = value, f = value를 바꾸는 함수
        보통 이름은 [value, setValue] 등으로 지정한다
        f : 하나의 파라미터를 받는다
            어떤 값을 부여하던 f 는 그 값으로 업데이트하고 리렌더링을 일으킨다
    초기값을 설정할 수 있다
        이 초기값은 value에 할당된다

JS문법 : 인자를 변수에 바로 할당하는 방법
    const food = ['tomato', 'potato'];
    const [red, brown] = food;
    red = 'tomato', brown = 'potato'

React.js는 UI에서 바뀐 부분만 업데이트 해준다
props : 부모컴포넌트로부터 자식 컴포넌트에 데이터를 보낼 수 있게 한다
    커스텀 컴포넌트에서 설정하는 모든 property를 생성자 컴포넌트의 첫번째 인자로 준다

props types : 어떤 타입의 prop을 받고 있는지 체크해준다
    컴포넌트 이름.propTypes = { prop/name: PropTypes.type }
        ex) Btn.propTypes = { text: PropTypes.string }
    컴포넌트의 prop명은 개발자가 지은 이름으로 유형을 잘못 표기해도 코드는 유효해서 브라우저가 알려주지않는다.
    만약 해당 prop에 propTypes로 지정하지 않은 유형을 기입하면 콘솔창에 error를 반환한다
    propTypes에 지정한 prop이 컴포넌트에 없더라도 에러는 발생하지 않는다 하지만 특정 prop을 해당 컴포넌트에 무조건 가지고 있어야 한다는 것을 확실히 하려면
        컴포넌트 이름.propTypes = { prop/name: PropTypes.type.isRequired }
            ex) Btn.propTypes = { text: PropTypes.string.isRequired }

React memo : 컴포넌트를 리렌더링 할지 말지 결정할 수 있다 ( props가 변경되지 않는 선에서 )
    사용하는 이유 : 부모 컴포넌트 ( 생성자 컴포넌트 ) 에서 state가 변경될 경우 그 아래 자식 컴포넌트 ( 커스텀 컴포넌트 ) 는 무조건 리렌더링된다. 만약 변함이 없는 자식도 포함하여 같이 리렌더링 될 경우 앱이 느려지는 원인이 될 수도 있기 때문